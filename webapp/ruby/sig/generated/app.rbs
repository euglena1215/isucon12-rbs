class Data
  self.@classes: Hash[untyped, Hash[Symbol, String]]

  # :: [KLASS < ::Data::_DataClass] (**untyped) ?{ (KLASS) [self: KLASS] -> void } -> KLASS
  def self.typed_define: [KLASS < ::Data::_DataClass] (**untyped) ?{ (KLASS) [self: KLASS] -> void } -> KLASS

  def self.generate_rbs: (untyped class_name, untyped attrs) -> untyped
end

module Isuports
  class App < Sinatra::Base
    TENANT_DB_SCHEMA_FILE_PATH: ::String

    INITIALIZE_SCRIPT: ::String

    COOKIE_NAME: ::String

    ROLE_ADMIN: ::String

    ROLE_ORGANIZER: ::String

    ROLE_PLAYER: ::String

    ROLE_NONE: ::String

    # 正しいテナント名の正規表現
    TENANT_NAME_REGEXP: ::Regexp

    class PlayerRow
      attr_accessor tenant_id: Integer
      attr_accessor id: String
      attr_accessor display_name: String
      attr_accessor is_disqualified: bool
      attr_accessor created_at: Integer
      attr_accessor updated_at: Integer
      def to_h: () -> Hash[Symbol, untyped]
    end

    class HttpError < StandardError
      # @dynamic code
      attr_reader code: untyped

      def initialize: (untyped code, untyped message) -> untyped
    end

    @trace_file_path: String

    def initialize: (?untyped app, **untyped _kwargs) -> untyped

    # 管理用DBに接続する
    def connect_admin_db: () -> Mysql2::Client[Mysql2::ResultAsHash]

    def admin_db: () -> Mysql2::Client[Mysql2::ResultAsHash]

    # テナントDBのパスを返す
    # :: (Integer) -> String
    def tenant_db_path: (Integer) -> String

    # テナントDBに接続する
    # :: (Integer) { (SQLite3::Database) -> untyped } -> void
    def connect_to_tenant_db: (Integer) { (SQLite3::Database) -> untyped } -> void

    # テナントDBを新規に作成する
    # :: (Integer) -> nil
    def create_tenant_db: (Integer) -> nil

    # システム全体で一意なIDを生成する
    def dispense_id: () -> String

    # リクエストヘッダをパースしてViewerを返す
    def parse_viewer: () -> untyped

    def retrieve_tenant_row_from_header: () -> untyped

    # 参加者を取得する
    def retrieve_player: (untyped tenant_db, untyped id) -> untyped

    # 参加者を認可する
    # 参加者向けAPIで呼ばれる
    def authorize_player!: (untyped tenant_db, untyped id) -> untyped

    # 大会を取得する
    def retrieve_competition: (untyped tenant_db, untyped id) -> untyped

    # 排他ロックのためのファイル名を生成する
    def lock_file_path: (untyped id) -> untyped

    # 排他ロックする
    # :: (Integer tenant_id) { () -> untyped } -> void
    def flock_by_tenant_id: (Integer tenant_id) { () -> untyped } -> void

    # テナント名が規則に沿っているかチェックする
    def validate_tenant_name!: (untyped name) -> untyped

    BillingReport: untyped

    # 大会ごとの課金レポートを計算する
    def billing_report_by_competition: (untyped tenant_db, untyped tenant_id, untyped competition_id) -> untyped

    def competitions_handler: (untyped v, untyped tenant_db) -> untyped

    class CompetitionRank
      attr_accessor rank: Integer
      attr_accessor score: Integer
      attr_accessor player_id: String
      attr_accessor player_display_name: String
      attr_accessor row_num: Integer
      def initialize: (?rank: Integer, ?score: Integer, ?player_id: String, ?player_display_name: String, ?row_num: Integer) -> void
    end
  end
end
