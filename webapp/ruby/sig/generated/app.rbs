# Generated from app.rb with RBS::Inline

module Isuports
  class App < Sinatra::Base
    TENANT_DB_SCHEMA_FILE_PATH: ::String

    INITIALIZE_SCRIPT: ::String

    COOKIE_NAME: ::String

    ROLE_ADMIN: ::String

    ROLE_ORGANIZER: ::String

    ROLE_PLAYER: ::String

    ROLE_NONE: ::String

    # 正しいテナント名の正規表現
    TENANT_NAME_REGEXP: ::Regexp

    # アクセスしてきた人の情報
    class Viewer < Data
      attr_reader role(): String

      attr_reader player_id(): String

      attr_reader tenant_name(): String

      attr_reader tenant_id(): Integer

      def self.new: (String role, String player_id, String tenant_name, Integer tenant_id) -> instance
                  | (role: String, player_id: String, tenant_name: String, tenant_id: Integer) -> instance
    end

    class TenantRow < Data
      attr_reader id(): Integer

      attr_reader name(): String

      attr_reader display_name(): String

      attr_reader created_at(): Integer

      attr_reader updated_at(): Integer

      def self.new: (Integer id, String name, String display_name, Integer created_at, Integer updated_at) -> instance
                  | (id: Integer, name: String, display_name: String, created_at: Integer, updated_at: Integer) -> instance
    end

    class PlayerRow < Struct[untyped]
      attr_accessor tenant_id(): Integer

      attr_accessor id(): String

      attr_accessor display_name(): String

      attr_accessor is_disqualified(): bool

      attr_accessor created_at(): Integer

      attr_accessor updated_at(): Integer

      def self.new: (?tenant_id: Integer, ?id: String, ?display_name: String, ?is_disqualified: bool, ?created_at: Integer, ?updated_at: Integer) -> instance
    end

    class CompetitionRow < Data
      attr_reader tenant_id(): String

      attr_reader id(): String

      attr_reader title(): String

      attr_reader finished_at(): Integer

      attr_reader created_at(): Integer

      attr_reader updated_at(): Integer

      def self.new: (String tenant_id, String id, String title, Integer finished_at, Integer created_at, Integer updated_at) -> instance
                  | (tenant_id: String, id: String, title: String, finished_at: Integer, created_at: Integer, updated_at: Integer) -> instance
    end

    class PlayerScoreRow < Data
      attr_reader tenant_id(): String

      attr_reader id(): String

      attr_reader player_id(): String

      attr_reader competition_id(): String

      attr_reader score(): Integer

      attr_reader row_num(): Integer

      attr_reader created_at(): Integer

      attr_reader updated_at(): Integer

      def self.new: (String tenant_id, String id, String player_id, String competition_id, Integer score, Integer row_num, Integer created_at, Integer updated_at) -> instance
                  | (tenant_id: String, id: String, player_id: String, competition_id: String, score: Integer, row_num: Integer, created_at: Integer, updated_at: Integer) -> instance
    end

    class HttpError < StandardError
      # @dynamic code
      attr_reader code: untyped

      def initialize: (untyped code, untyped message) -> untyped
    end

    @trace_file_path: String

    def initialize: (?untyped app, **untyped _kwargs) -> untyped

    # 管理用DBに接続する
    def connect_admin_db: () -> untyped

    def admin_db: () -> untyped

    # テナントDBのパスを返す
    # :: (Integer) -> String
    def tenant_db_path: (untyped id) -> untyped

    # テナントDBに接続する
    # :: (Integer) { (SQLite3::Database) -> untyped } -> void
    def connect_to_tenant_db: (untyped id) ?{ (?) -> untyped } -> untyped

    # テナントDBを新規に作成する
    # :: (Integer) -> nil
    def create_tenant_db: (untyped id) -> untyped

    # システム全体で一意なIDを生成する
    def dispense_id: () -> untyped

    # リクエストヘッダをパースしてViewerを返す
    def parse_viewer: () -> untyped

    def retrieve_tenant_row_from_header: () -> untyped

    # 参加者を取得する
    # :: (SQLite3::Database, Integer) -> PlayerRow?
    def retrieve_player: (untyped tenant_db, untyped id) -> untyped

    # 参加者を認可する
    # 参加者向けAPIで呼ばれる
    # :: (SQLite3::Database, Integer) -> void
    def authorize_player!: (untyped tenant_db, untyped id) -> untyped

    # 大会を取得する
    # :: (SQLite3::Database, Integer) -> CompetitionRow?
    def retrieve_competition: (untyped tenant_db, untyped id) -> untyped

    # 排他ロックのためのファイル名を生成する
    # :: (Integer) -> String
    def lock_file_path: (untyped id) -> untyped

    # 排他ロックする
    # :: (Integer tenant_id) { () -> untyped } -> void
    def flock_by_tenant_id: (untyped tenant_id) ?{ (?) -> untyped } -> untyped

    # テナント名が規則に沿っているかチェックする
    # :: (String) -> void
    def validate_tenant_name!: (untyped name) -> untyped

    class BillingReport < Struct[untyped]
      attr_accessor competition_id(): Integer

      attr_accessor competition_title(): String

      attr_accessor player_count(): Integer

      attr_accessor visitor_count(): Integer

      attr_accessor billing_player_yen(): Integer

      attr_accessor billing_visitor_yen(): Integer

      attr_accessor billing_yen(): Integer

      def self.new: (?competition_id: Integer, ?competition_title: String, ?player_count: Integer, ?visitor_count: Integer, ?billing_player_yen: Integer, ?billing_visitor_yen: Integer, ?billing_yen: Integer) -> instance
    end

    # 大会ごとの課金レポートを計算する
    # :: (SQLite3::Database, Integer, Integer) -> BillingReport
    def billing_report_by_competition: (untyped tenant_db, untyped tenant_id, untyped competition_id) -> untyped

    def competitions_handler: (untyped v, untyped tenant_db) -> untyped

    class CompetitionRank
      attr_accessor rank: Integer
      attr_accessor score: Integer
      attr_accessor player_id: String
      attr_accessor player_display_name: String
      attr_accessor row_num: Integer
      def initialize: (?rank: Integer, ?score: Integer, ?player_id: String, ?player_display_name: String, ?row_num: Integer) -> void
    end
  end
end
